// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library javascript_engine_dart_wrapper;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


class DartFunction {
  DartFunction._(this._bc, this._bcOffset);
  factory DartFunction(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DartFunction> reader = _DartFunctionReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get functionId => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);

  @override
  String toString() {
    return 'DartFunction{name: ${name}, functionId: ${functionId}}';
  }
}

class _DartFunctionReader extends fb.TableReader<DartFunction> {
  const _DartFunctionReader();

  @override
  DartFunction createObject(fb.BufferContext bc, int offset) => 
    DartFunction._(bc, offset);
}

class DartFunctionBuilder {
  DartFunctionBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFunctionId(int? functionId) {
    fbBuilder.addUint64(1, functionId);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DartFunctionObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final int? _functionId;

  DartFunctionObjectBuilder({
    String? name,
    int? functionId,
  })
      : _name = name,
        _functionId = functionId;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addUint64(1, _functionId);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
class DartModule {
  DartModule._(this._bc, this._bcOffset);
  factory DartModule(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<DartModule> reader = _DartModuleReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  String? get name => const fb.StringReader().vTableGetNullable(_bc, _bcOffset, 4);
  List<DartFunction>? get functions => const fb.ListReader<DartFunction>(DartFunction.reader).vTableGetNullable(_bc, _bcOffset, 6);

  @override
  String toString() {
    return 'DartModule{name: ${name}, functions: ${functions}}';
  }
}

class _DartModuleReader extends fb.TableReader<DartModule> {
  const _DartModuleReader();

  @override
  DartModule createObject(fb.BufferContext bc, int offset) => 
    DartModule._(bc, offset);
}

class DartModuleBuilder {
  DartModuleBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(2);
  }

  int addNameOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addFunctionsOffset(int? offset) {
    fbBuilder.addOffset(1, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class DartModuleObjectBuilder extends fb.ObjectBuilder {
  final String? _name;
  final List<DartFunctionObjectBuilder>? _functions;

  DartModuleObjectBuilder({
    String? name,
    List<DartFunctionObjectBuilder>? functions,
  })
      : _name = name,
        _functions = functions;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? nameOffset = _name == null ? null
        : fbBuilder.writeString(_name!);
    final int? functionsOffset = _functions == null ? null
        : fbBuilder.writeList(_functions!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(2);
    fbBuilder.addOffset(0, nameOffset);
    fbBuilder.addOffset(1, functionsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
